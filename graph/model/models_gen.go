// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Transaction struct {
	ID           string          `json:"id"`
	Date         string          `json:"date"`
	Description  string          `json:"description"`
	Amount       float64         `json:"amount"`
	Category     string          `json:"category"`
	Account      string          `json:"account"`
	CustomFields []*UnknownField `json:"customFields"`
}

type UnknownField struct {
	FieldName string           `json:"fieldName"`
	Value     string           `json:"value"`
	FieldType UnknownFieldType `json:"fieldType"`
}

type User struct {
	ID        string `json:"id"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

type UnknownFieldType string

const (
	UnknownFieldTypeString  UnknownFieldType = "STRING"
	UnknownFieldTypeNumber  UnknownFieldType = "NUMBER"
	UnknownFieldTypeDate    UnknownFieldType = "DATE"
	UnknownFieldTypeBoolean UnknownFieldType = "BOOLEAN"
)

var AllUnknownFieldType = []UnknownFieldType{
	UnknownFieldTypeString,
	UnknownFieldTypeNumber,
	UnknownFieldTypeDate,
	UnknownFieldTypeBoolean,
}

func (e UnknownFieldType) IsValid() bool {
	switch e {
	case UnknownFieldTypeString, UnknownFieldTypeNumber, UnknownFieldTypeDate, UnknownFieldTypeBoolean:
		return true
	}
	return false
}

func (e UnknownFieldType) String() string {
	return string(e)
}

func (e *UnknownFieldType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UnknownFieldType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UnknownFieldType", str)
	}
	return nil
}

func (e UnknownFieldType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
